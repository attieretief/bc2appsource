# .github/workflows/publish-to-pypi.yml
name: Build and Publish to PyPI

on:
  push:
    branches:
      - main

# Add this section to grant write permissions
permissions:
  contents: write
  id-token: write  # Required for PyPI trusted publishing

jobs:
  build-and-publish:
    name: Build and Publish BC2AppSource to PyPI
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for version determination
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel setuptools
    
    - name: Determine version and bump
      id: version
      run: |
        # Debug current state
        echo "Current directory: $(pwd)"
        echo "Files in directory: $(ls -la)"
        echo "Current commit message: $(git log -1 --pretty=%B)"
        
        # Extract current version from setup.py
        CURRENT_VERSION=$(grep -P 'version\s*=\s*"([^"]*)"' setup.py | grep -Po '"([^"]*)"' | sed 's/"//g')
        echo "Current version: $CURRENT_VERSION"
        
        # Parse version components
        IFS='.' read -r -a VERSION_PARTS <<< "$CURRENT_VERSION"
        MAJOR="${VERSION_PARTS[0]}"
        MINOR="${VERSION_PARTS[1]}"
        PATCH="${VERSION_PARTS[2]}"
        
        # Determine which component to bump
        COMMIT_MSG=$(git log -1 --pretty=%B)
        if [[ "$COMMIT_MSG" == *"#major"* ]]; then
          echo "Bumping major version"
          MAJOR=$((MAJOR + 1))
          MINOR=0
          PATCH=0
        elif [[ "$COMMIT_MSG" == *"#minor"* ]]; then
          echo "Bumping minor version"
          MINOR=$((MINOR + 1))
          PATCH=0
        else
          echo "Bumping patch version"
          PATCH=$((PATCH + 1))
        fi
        
        # Set new version
        NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}"
        echo "New version: $NEW_VERSION"
        echo "VERSION=$NEW_VERSION" >> $GITHUB_ENV
        
        # Update version in setup.py
        sed -i "s/version=\"$CURRENT_VERSION\"/version=\"$NEW_VERSION\"/" setup.py
        
        # Also update version in __init__.py
        sed -i "s/__version__ = \"$CURRENT_VERSION\"/__version__ = \"$NEW_VERSION\"/" bc2appsource/__init__.py
        
        # Show updated files
        echo "Updated setup.py:"
        grep version setup.py
        echo "Updated __init__.py:"
        grep __version__ bc2appsource/__init__.py
    
    - name: Configure Git for version commit
      run: |
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Commit and push the version bump
        git add setup.py bc2appsource/__init__.py
        git commit -m "Bump version to ${{ env.VERSION }} [skip ci]"
        git push
    
    - name: Create Git tag
      run: |
        git tag -a "v${{ env.VERSION }}" -m "Release version ${{ env.VERSION }}"
        git push origin "v${{ env.VERSION }}"
    
    - name: Build package
      run: python -m build
    
    - name: Check distribution
      run: |
        python -m twine check dist/*
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        verbose: true
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: "v${{ env.VERSION }}"
        name: "BC2AppSource v${{ env.VERSION }}"
        body: |
          ðŸš€ **Release BC2AppSource v${{ env.VERSION }}**
          
          This release was automatically created by GitHub Actions.
          
          ## ðŸ“¦ Installation
          
          ```bash
          pip install bc2appsource==${{ env.VERSION }}
          ```
          
          ## ðŸ“‹ Changes
          
          See the commit history for detailed changes in this release.
        draft: false
        prerelease: false
